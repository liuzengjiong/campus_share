package com.campus.share.dao;

import com.campus.share.model.UserLogin;
import java.util.List;
import org.apache.ibatis.annotations.Delete;
import org.apache.ibatis.annotations.Insert;
import org.apache.ibatis.annotations.Result;
import org.apache.ibatis.annotations.Results;
import org.apache.ibatis.annotations.Select;
import org.apache.ibatis.annotations.Update;
import org.apache.ibatis.type.JdbcType;

public interface UserLoginMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_login
     *
     * @mbggenerated
     */
    @Delete({
        "delete from user_login",
        "where user_id = #{userId,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long userId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_login
     *
     * @mbggenerated
     */
    @Insert({
        "insert into user_login (user_id, user_no, ",
        "password, last_login_time, ",
        "user_status, token, token_invalid_time)",
        "values (#{userId,jdbcType=BIGINT}, #{userNo,jdbcType=VARCHAR}, ",
        "#{password,jdbcType=VARCHAR}, #{lastLoginTime,jdbcType=TIMESTAMP}, ",
        "#{userStatus,jdbcType=BIT}, #{token,jdbcType=CHAR}, #{tokenInvalidTime,jdbcType=TIMESTAMP})"
    })
    int insert(UserLogin record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_login
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "user_id, user_no, password, last_login_time, user_status, token, token_invalid_time",
        "from user_login",
        "where user_id = #{userId,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="user_id", property="userId", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="user_no", property="userNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="last_login_time", property="lastLoginTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="user_status", property="userStatus", jdbcType=JdbcType.BIT),
        @Result(column="token", property="token", jdbcType=JdbcType.CHAR),
        @Result(column="token_invalid_time", property="tokenInvalidTime", jdbcType=JdbcType.TIMESTAMP)
    })
    UserLogin selectByPrimaryKey(Long userId);


    @Select({
            "select",
            "user_id, user_no, password, last_login_time, user_status, token, token_invalid_time",
            "from user_login",
            "where user_no = #{userNo,jdbcType=VARCHAR}"
    })
    @Results({
            @Result(column="user_id", property="userId", jdbcType=JdbcType.BIGINT, id=true),
            @Result(column="user_no", property="userNo", jdbcType=JdbcType.VARCHAR),
            @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
            @Result(column="last_login_time", property="lastLoginTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="user_status", property="userStatus", jdbcType=JdbcType.BIT),
            @Result(column="token", property="token", jdbcType=JdbcType.CHAR),
            @Result(column="token_invalid_time", property="tokenInvalidTime", jdbcType=JdbcType.TIMESTAMP)
    })
    UserLogin selectByUserNo(String userNo);

    @Select({
            "select",
            "user_id, user_no, last_login_time, user_status, token, token_invalid_time",
            "from user_login",
            "where token = #{token,jdbcType=CHAR} and token_invalid_time >= now() "
    })
    @Results({
            @Result(column="user_id", property="userId", jdbcType=JdbcType.BIGINT, id=true),
            @Result(column="user_no", property="userNo", jdbcType=JdbcType.VARCHAR),
            @Result(column="last_login_time", property="lastLoginTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="user_status", property="userStatus", jdbcType=JdbcType.BIT),
            @Result(column="token", property="token", jdbcType=JdbcType.CHAR),
            @Result(column="token_invalid_time", property="tokenInvalidTime", jdbcType=JdbcType.TIMESTAMP)
    })
    UserLogin selectIfValidByToken(String token);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_login
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "user_id, user_no, password, last_login_time, user_status, token, token_invalid_time",
        "from user_login"
    })
    @Results({
        @Result(column="user_id", property="userId", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="user_no", property="userNo", jdbcType=JdbcType.VARCHAR),
        @Result(column="password", property="password", jdbcType=JdbcType.VARCHAR),
        @Result(column="last_login_time", property="lastLoginTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="user_status", property="userStatus", jdbcType=JdbcType.BIT),
        @Result(column="token", property="token", jdbcType=JdbcType.CHAR),
        @Result(column="token_invalid_time", property="tokenInvalidTime", jdbcType=JdbcType.TIMESTAMP)
    })
    List<UserLogin> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table user_login
     *
     * @mbggenerated
     */
    @Update({
        "update user_login",
        "set user_no = #{userNo,jdbcType=VARCHAR},",
          "password = #{password,jdbcType=VARCHAR},",
          "last_login_time = #{lastLoginTime,jdbcType=TIMESTAMP},",
          "user_status = #{userStatus,jdbcType=BIT},",
          "token = #{token,jdbcType=CHAR},",
          "token_invalid_time = #{tokenInvalidTime,jdbcType=TIMESTAMP}",
        "where user_id = #{userId,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(UserLogin record);


    @Update({
            "update user_login",
            "set token_invalid_time = #{tokenInvalidTime,jdbcType=TIMESTAMP}",
            "where user_id = #{userId,jdbcType=BIGINT}"
    })
    int updateTokenInvalidTime(UserLogin record);
}