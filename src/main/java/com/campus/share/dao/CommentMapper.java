package com.campus.share.dao;

import com.campus.share.model.Comment;
import java.util.List;

import org.apache.ibatis.annotations.*;
import org.apache.ibatis.type.JdbcType;
import org.springframework.stereotype.Repository;

@Mapper
public interface CommentMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table comment
     *
     * @mbggenerated
     */
    @Delete({
        "delete from comment",
        "where comment_id = #{commentId,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long commentId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table comment
     *
     * @mbggenerated
     */
    @Insert({
        "insert into comment (comment_id, essay_id, ",
        "author_id, commented_id, ",
        "create_time, update_time, ",
        "comment_status, content)",
        "values (#{commentId,jdbcType=BIGINT}, #{essayId,jdbcType=BIGINT}, ",
        "#{authorId,jdbcType=BIGINT}, #{commentedId,jdbcType=BIGINT}, ",
        "#{createTime,jdbcType=TIMESTAMP}, #{updateTime,jdbcType=TIMESTAMP}, ",
        "#{commentStatus,jdbcType=TINYINT}, #{content,jdbcType=LONGVARCHAR})"
    })
    int insert(Comment record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table comment
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "comment_id, essay_id, author_id, commented_id, create_time, update_time, comment_status, ",
        "content",
        "from comment",
        "where comment_id = #{commentId,jdbcType=BIGINT}"
    })
    @Results({
        @Result(column="comment_id", property="commentId", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="essay_id", property="essayId", jdbcType=JdbcType.BIGINT),
        @Result(column="author_id", property="authorId", jdbcType=JdbcType.BIGINT),
        @Result(column="commented_id", property="commentedId", jdbcType=JdbcType.BIGINT),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="comment_status", property="commentStatus", jdbcType=JdbcType.TINYINT),
        @Result(column="content", property="content", jdbcType=JdbcType.LONGVARCHAR)
    })
    Comment selectByPrimaryKey(Long commentId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table comment
     *
     * @mbggenerated
     */
    @Select({
        "select",
        "comment_id, essay_id, author_id, commented_id, create_time, update_time, comment_status, ",
        "content",
        "from comment"
    })
    @Results({
        @Result(column="comment_id", property="commentId", jdbcType=JdbcType.BIGINT, id=true),
        @Result(column="essay_id", property="essayId", jdbcType=JdbcType.BIGINT),
        @Result(column="author_id", property="authorId", jdbcType=JdbcType.BIGINT),
        @Result(column="commented_id", property="commentedId", jdbcType=JdbcType.BIGINT),
        @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
        @Result(column="comment_status", property="commentStatus", jdbcType=JdbcType.TINYINT),
        @Result(column="content", property="content", jdbcType=JdbcType.LONGVARCHAR)
    })
    List<Comment> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table comment
     *
     * @mbggenerated
     */
    @Update({
        "update comment",
        "set essay_id = #{essayId,jdbcType=BIGINT},",
          "author_id = #{authorId,jdbcType=BIGINT},",
          "commented_id = #{commentedId,jdbcType=BIGINT},",
          "create_time = #{createTime,jdbcType=TIMESTAMP},",
          "update_time = #{updateTime,jdbcType=TIMESTAMP},",
          "comment_status = #{commentStatus,jdbcType=TINYINT},",
          "content = #{content,jdbcType=LONGVARCHAR}",
        "where comment_id = #{commentId,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(Comment record);
}