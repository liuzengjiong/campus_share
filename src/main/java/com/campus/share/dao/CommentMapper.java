package com.campus.share.dao;

import com.campus.share.model.Comment;
import java.util.List;

import org.apache.ibatis.annotations.*;
import org.apache.ibatis.mapping.FetchType;
import org.apache.ibatis.type.JdbcType;

public interface CommentMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table comment
     *
     * @mbggenerated
     */
    @Delete({
            "delete from comment",
            "where comment_id = #{commentId,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long commentId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table comment
     *
     * @mbggenerated
     */
    @Insert({
            "insert into comment (comment_id, essay_id, ",
            "author_id, create_time, ",
            "update_time, content)",
            "values (#{commentId,jdbcType=BIGINT}, #{essayId,jdbcType=BIGINT}, ",
            "#{authorId,jdbcType=BIGINT}, #{createTime,jdbcType=TIMESTAMP}, ",
            "#{updateTime,jdbcType=TIMESTAMP}, #{content,jdbcType=LONGVARCHAR})"
    })
    int insert(Comment record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table comment
     *
     * @mbggenerated
     */
    @Select({
            "select",
            "comment_id, essay_id, author_id, create_time, update_time, content",
            "from comment",
            "where comment_id = #{commentId,jdbcType=BIGINT}"
    })
    @Results({
            @Result(column="comment_id", property="commentId", jdbcType=JdbcType.BIGINT, id=true),
            @Result(column="essay_id", property="essayId", jdbcType=JdbcType.BIGINT),
            @Result(column="author_id", property="authorId", jdbcType=JdbcType.BIGINT),
            @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="content", property="content", jdbcType=JdbcType.LONGVARCHAR)
    })
    Comment selectByPrimaryKey(Long commentId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table comment
     *
     * @mbggenerated
     */
    @Select({
            "select",
            "comment_id, essay_id, author_id, create_time, update_time, content",
            "from comment"
    })
    @Results({
            @Result(column="comment_id", property="commentId", jdbcType=JdbcType.BIGINT, id=true),
            @Result(column="essay_id", property="essayId", jdbcType=JdbcType.BIGINT),
            @Result(column="author_id", property="authorId", jdbcType=JdbcType.BIGINT),
            @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="content", property="content", jdbcType=JdbcType.LONGVARCHAR)
    })
    List<Comment> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table comment
     *
     * @mbggenerated
     */
    @Update({
            "update comment",
            "set essay_id = #{essayId,jdbcType=BIGINT},",
            "author_id = #{authorId,jdbcType=BIGINT},",
            "create_time = #{createTime,jdbcType=TIMESTAMP},",
            "update_time = #{updateTime,jdbcType=TIMESTAMP},",
            "content = #{content,jdbcType=LONGVARCHAR}",
            "where comment_id = #{commentId,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(Comment record);


    @Select({
            "select",
            "count(1)",
            "from comment",
            "where essay_id = #{essayId,jdbcType=BIGINT}"
    })
    int countByEssayId(Long essayId);

    @Select({
            "select",
            "comment_id, essay_id, author_id, create_time, update_time, content",
            "from comment",
            "where essay_id = #{essayId,jdbcType=BIGINT}"
    })
    @Results({
            @Result(column="comment_id", property="commentId", jdbcType=JdbcType.BIGINT, id=true),
            @Result(column="essay_id", property="essayId", jdbcType=JdbcType.BIGINT),
            @Result(column="author_id", property="authorId", jdbcType=JdbcType.BIGINT),
            @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="content", property="content", jdbcType=JdbcType.LONGVARCHAR),
            @Result(column="author_id",property="author",one=@One(
                    select="com.campus.share.dao.UserInfoMapper.selectByPrimaryKey",fetchType= FetchType.EAGER)),

    })
    List<Comment> selectByEssayId(Long essayId);
}