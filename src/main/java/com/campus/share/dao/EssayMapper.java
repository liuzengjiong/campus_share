package com.campus.share.dao;

import com.campus.share.bean.vo.EssayVO;
import com.campus.share.model.Essay;
import java.util.List;
import java.util.Map;

import com.campus.share.sql.EssaySqlProvider;
import org.apache.ibatis.annotations.*;
import org.apache.ibatis.mapping.FetchType;
import org.apache.ibatis.type.JdbcType;

public interface EssayMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table essay
     *
     * @mbggenerated
     */
    @Delete({
            "delete from essay",
            "where essay_id = #{essayId,jdbcType=BIGINT}"
    })
    int deleteByPrimaryKey(Long essayId);


    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table essay
     *
     * @mbggenerated
     */
    @Select({
            "select",
            "essay_id, author_id, title, summary, read_num, essay_type_key, resource_type_key, ",
            "create_time, update_time, essay_status, content",
            "from essay",
            "where essay_id = #{essayId,jdbcType=BIGINT}"
    })
    @Results({
            @Result(column="essay_id", property="essayId", jdbcType=JdbcType.BIGINT, id=true),
            @Result(column="author_id", property="authorId", jdbcType=JdbcType.BIGINT),
            @Result(column="title", property="title", jdbcType=JdbcType.VARCHAR),
            @Result(column="summary", property="summary", jdbcType=JdbcType.VARCHAR),
            @Result(column="read_num", property="readNum", jdbcType=JdbcType.INTEGER),
            @Result(column="essay_type_key", property="essayTypeKey", jdbcType=JdbcType.VARCHAR),
            @Result(column="resource_type_key", property="resourceTypeKey", jdbcType=JdbcType.VARCHAR),
            @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="essay_status", property="essayStatus", jdbcType=JdbcType.INTEGER),
            @Result(column="content", property="content", jdbcType=JdbcType.LONGVARCHAR)
    })
    Essay selectByPrimaryKey(Long essayId);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table essay
     *
     * @mbggenerated
     */
    @Select({
            "select",
            "essay_id, author_id, title, summary, read_num, essay_type_key, resource_type_key, ",
            "create_time, update_time, essay_status, content",
            "from essay"
    })
    @Results({
            @Result(column="essay_id", property="essayId", jdbcType=JdbcType.BIGINT, id=true),
            @Result(column="author_id", property="authorId", jdbcType=JdbcType.BIGINT),
            @Result(column="title", property="title", jdbcType=JdbcType.VARCHAR),
            @Result(column="summary", property="summary", jdbcType=JdbcType.VARCHAR),
            @Result(column="read_num", property="readNum", jdbcType=JdbcType.INTEGER),
            @Result(column="essay_type_key", property="essayTypeKey", jdbcType=JdbcType.VARCHAR),
            @Result(column="resource_type_key", property="resourceTypeKey", jdbcType=JdbcType.VARCHAR),
            @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="essay_status", property="essayStatus", jdbcType=JdbcType.INTEGER),
            @Result(column="content", property="content", jdbcType=JdbcType.LONGVARCHAR)
    })
    List<Essay> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table essay
     *
     * @mbggenerated
     */
    @Update({
            "update essay",
            "set author_id = #{authorId,jdbcType=BIGINT},",
            "title = #{title,jdbcType=VARCHAR},",
            "summary = #{summary,jdbcType=VARCHAR},",
            "read_num = #{readNum,jdbcType=INTEGER},",
            "essay_type_key = #{essayTypeKey,jdbcType=VARCHAR},",
            "resource_type_key = #{resourceTypeKey,jdbcType=VARCHAR},",
            "create_time = #{createTime,jdbcType=TIMESTAMP},",
            "update_time = #{updateTime,jdbcType=TIMESTAMP},",
            "essay_status = #{essayStatus,jdbcType=INTEGER},",
            "content = #{content,jdbcType=LONGVARCHAR}",
            "where essay_id = #{essayId,jdbcType=BIGINT}"
    })
    int updateByPrimaryKey(Essay record);



    //————————————————————————————————————————————————————————————————————————————


    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table essay
     *
     * @mbggenerated
     */
    @Insert({
            "insert into essay (essay_id, author_id, ",
            "title, summary,essay_status, ",
            "read_num, essay_type_key, ",
            "resource_type_key, create_time, ",
            "update_time, content)",
            "values (#{essayId,jdbcType=BIGINT}, #{authorId,jdbcType=BIGINT}, ",
            "#{title,jdbcType=VARCHAR}, #{summary,jdbcType=VARCHAR}, ",
            "#{essayStatus,jdbcType=INTEGER}, ",
            "#{readNum,jdbcType=INTEGER}, #{essayTypeKey,jdbcType=VARCHAR}, ",
            "#{resourceTypeKey,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, ",
            "#{updateTime,jdbcType=TIMESTAMP}, #{content,jdbcType=LONGVARCHAR})"
    })
    @Options(useGeneratedKeys=true, keyProperty="essayId", keyColumn="essay_id")
    int insert(Essay record);

    @Select({
            "select",
            "essay_id, author_id, title, summary, read_num, essay_type_key, resource_type_key, ",
            "create_time, update_time, content, essay_status",
            "from essay",
            "where essay_id = #{essayId,jdbcType=BIGINT}"
    })
    @Results({
            @Result(column="essay_id", property="essayId", jdbcType=JdbcType.BIGINT, id=true),
            @Result(column="author_id", property="authorId", jdbcType=JdbcType.BIGINT),
            @Result(column="title", property="title", jdbcType=JdbcType.VARCHAR),
            @Result(column="summary", property="summary", jdbcType=JdbcType.VARCHAR),
            @Result(column="read_num", property="readNum", jdbcType=JdbcType.INTEGER),
            @Result(column="essay_type_key", property="essayTypeKey", jdbcType=JdbcType.VARCHAR),
            @Result(column="resource_type_key", property="resourceTypeKey", jdbcType=JdbcType.VARCHAR),
            @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="essay_status", property="essayStatus", jdbcType=JdbcType.INTEGER),
            @Result(column="content", property="content", jdbcType=JdbcType.LONGVARCHAR),
            @Result(column="author_id",property="author",one=@One(
                    select="com.campus.share.dao.UserInfoMapper.selectByPrimaryKey",fetchType= FetchType.EAGER)),
            @Result(column="essay_id",property="comments",many=@Many(
                    select="com.campus.share.dao.CommentMapper.selectByEssayId",fetchType= FetchType.EAGER)),
            @Result(column="essay_id",property="reward",one=@One(
                    select="com.campus.share.dao.RewardMapper.selectByEssayId",fetchType= FetchType.EAGER))

    })
    EssayVO selectFullInfoByPrimaryKey(Long essayId);

    @Update({
            "update essay",
            "set read_num = read_num+1",
            "where essay_id = #{essayId,jdbcType=BIGINT}"
    })
    int addReadNum(Long essayId);


    @Update({
            "update essay",
            "set essay_status = #{param2,jdbcType=INTEGER}",
            "where essay_id = #{param1,jdbcType=BIGINT}"
    })
    int changeStatus(Long essayId, Integer essayStatus);


    /**
     * 搜索帖子
     * @param param {keyword:关键词, essayTypeKey:帖子类别, sourceType:资源类别}
     * @return
     */
    @SelectProvider(type= EssaySqlProvider.class,method = "searchEssay")
    @Results({
            @Result(column="essay_id", property="essayId", jdbcType=JdbcType.BIGINT, id=true),
            @Result(column="author_id", property="authorId", jdbcType=JdbcType.BIGINT),
            @Result(column="title", property="title", jdbcType=JdbcType.VARCHAR),
            @Result(column="summary", property="summary", jdbcType=JdbcType.VARCHAR),
            @Result(column="read_num", property="readNum", jdbcType=JdbcType.INTEGER),
            @Result(column="essay_type_key", property="essayTypeKey", jdbcType=JdbcType.VARCHAR),
            @Result(column="resource_type_key", property="resourceTypeKey", jdbcType=JdbcType.VARCHAR),
            @Result(column="create_time", property="createTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="update_time", property="updateTime", jdbcType=JdbcType.TIMESTAMP),
            @Result(column="content", property="content", jdbcType=JdbcType.LONGVARCHAR),
            @Result(column="essay_status", property="essayStatus", jdbcType=JdbcType.INTEGER),
            @Result(column="author_id",property="author",one=@One(
                    select="com.campus.share.dao.UserInfoMapper.selectByPrimaryKey",fetchType= FetchType.EAGER)),
            @Result(column="essay_id",property="commentNum",one=@One(
                    select="com.campus.share.dao.CommentMapper.countByEssayId",fetchType= FetchType.EAGER)),
            @Result(column="essay_id",property="reward",one=@One(
                    select="com.campus.share.dao.RewardMapper.selectByEssayId",fetchType= FetchType.EAGER))

    })
    List<EssayVO>  searchEssay(Map<String,String> param);


}